#sudo apt install git -y
#git clone https://github.com/doceme/py-spidev
#cd py-spidev
#sudo python3 setup.py install

from datetime import datetime
from spidev import SpiDev
import time
adcChannel = 0
class MCP3008:
    def __init__(self, bus = 0, device = 0):
        self.bus, self.device = bus, device
        self.spi = SpiDev()
        self.open()
        self.spi.max_speed_hz = 1000000 # 1MHz

    def open(self):
        self.spi.open(self.bus, self.device)
        self.spi.max_speed_hz = 1000000 # 1MHz

    def read(self, channel = 0):
        adc = self.spi.xfer2([1, (8 + channel) << 4, 0])
        data = ((adc[1] & 3) << 8) + adc[2]
        return data

    def close(self):
        self.spi.close()

#Sampling AC requires enough loops to cover a half wave which is 8.33ms so that at least 1 peak is included.
#Covering multiple waves is better at 16.67ms each.
#Sampling period must be constrained to a reasonable time to not stall out processes or responsiveness too long.

def MillisecondsElapsed(ReferenceTime):
    CurrentTime = datetime.now()
    Delta = CurrentTime - ReferenceTime
    return Delta.total_seconds() * 1000

def GetChannelData(readChannel):
    start = datetime.now()
    i = 0
    max = 0
    min = 512
    sampleStart = datetime.now()
    while True:
        val = adc.read(channel = readChannel)
        if val > max :
            max = val
        if val < min :
            min = val
        i += 1
        elapsed = MillisecondsElapsed(sampleStart)
        if elapsed > 34: #each sinewave is 16.67ms long, this covers 2 full cycles.
            break
    calculatedAmps = 0
    #print("Duration: {:.2F} ms".format((finish - start).total_seconds()*1000))
    if max == 0 and min == 0:
        print("No data read from MCP3008")
    else:
        offset = (max - min)/2
        if offset <= 2:
            offset = 0 #1 or 2 is most likely just noise on the clamps or in the traces on the board
        calculatedAmps = round(offset*0.48828125,2)
        #print("Min: {}".format(min))
        #print("Max: {}".format(max))
        #print("Offset: {}".format(offset))
        #print("Amps {}: {}".format(readChannel, calculatedAmps))
        #print("Easy: {}".format(offset * 0.48828125))
        #print("Samples: {}".format(loopcount))
        #value = adc.read( channel = 0 ) # You can of course adapt the channel to be read out
    return calculatedAmps

adc = MCP3008(bus=1)
adc.open()
while True:
    for channel in range(2):
        v1 = GetChannelData(channel)
        v2 = GetChannelData(channel)
        v3 = GetChannelData(channel)
        v4 = GetChannelData(channel)
        v5 = GetChannelData(channel)
        lowAmps = v1
        oldAmps = v1
        if v2 > oldAmps:
            oldAmps = v2
        elif v2 < lowAmps:
            lowAmps = v2
        if v3 > oldAmps:
            oldAmps = v3
        elif v3 < lowAmps:
            lowAmps = v3
        if v4 > oldAmps:
            oldAmps = v4
        elif v4 < lowAmps:
            lowAmps = v4
        if v5 > oldAmps:
            oldAmps = v5
        elif v5 < lowAmps:
            lowAmps = v5
        print("Amps {}: {} - {}".format(channel, lowAmps, oldAmps))

    print(" ")
    time.sleep(1)
